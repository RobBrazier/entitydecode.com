---
import Field from "./Field.astro";
---

<div class="flex flex-col" x-data="data">
	<div id="options" class="flex flex-row justify-center gap-8">
		<label>
			<input type="checkbox" x-model="htmlEncode" />&nbsp;HTML Entity
			Encode/Decode
		</label>
		<label
			class="tooltip"
			data-tip="Currently only Decoding is supported as Encoding causes too many problems"
			aria-label="Currently only Decoding is supported as Encoding causes too many problems"
		>
			<input type="checkbox" x-model="urlDecode" />&nbsp;URL Encoding
			Decode (?)
		</label>
	</div>
	<Field
		id="encode"
		label="Encoded"
		placeholder="e.g. »"
		model="encoded"
		effect="decode(encoded)"
	/>
	<Field
		id="decode"
		label="Decoded"
		placeholder="e.g. »"
		model="decoded"
		effect="encode(decoded)"
	/>
</div>

<script>
	import he from "he";

	type Processor<T> = (input: T) => T;

	const performOperations = (
		operations: Processor<string>[],
		data: string,
		operation: string,
	): string => {
		let input = data;
		operations.forEach((func) => {
			try {
				input = func(input);
				console.log(input, operation);
			} catch (e) {
				console.error(`unable to ${operation} ${data} due to ${e}`);
			}
		});
		return input;
	};

	document.addEventListener("alpine:init", () => {
		Alpine.data("data", () => ({
			htmlEncode: true,
			urlDecode: true,
			encoded: "",
			decoded: "",
			focused: "",
			encode() {
				if (this.focused !== "decode") {
					return;
				}
				const op = [];
				if (this.htmlEncode)
					op.push((data: string) =>
						he.encode(data, { useNamedReferences: true }),
					);
				this.encoded = performOperations(
					op,
					this.decoded,
					this.focused,
				);
			},
			decode() {
				if (this.focused !== "encode") {
					return;
				}
				const op = [];
				if (this.htmlEncode) op.push(he.decode);
				if (this.urlDecode) op.push(decodeURIComponent);
				this.decoded = performOperations(
					op,
					this.encoded,
					this.focused,
				);
			},
		}));
	});
</script>
